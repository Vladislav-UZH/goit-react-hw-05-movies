{"version":3,"file":"static/js/247.e32d9346.chunk.js","mappings":"mQACAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAS,mCACTC,EAAa,mCAAG,WAAMC,GAAN,uFACDH,EAAAA,EAAAA,IAAA,qCAAwCC,GAAUE,GADjD,cACdC,EADc,yBAEbA,EAAKC,MAFQ,2CAAH,sDAIbC,EAAiB,mCAAG,WAAOC,EAAOJ,GAAd,uFACLH,EAAAA,EAAAA,IAAA,+BACOC,EADP,iCACsCM,EADtC,+BAEjBJ,GAHsB,cAClBC,EADkB,yBAKjBA,EAAKC,MALY,2CAAH,wDAOjBG,EAAkB,mCAAG,WAAOC,GAAP,8FAAWC,EAAX,+BAA4B,GAAIP,EAAhC,gCACNH,EAAAA,EAAAA,IAAA,gBACRS,GADQ,OACHC,EADG,oBACuBT,EADvB,mBAEjBE,GAHuB,cACnBC,EADmB,yBAKlBA,EAAKC,MALa,2CAAH,qD,0HC+BxB,UAvCa,WACX,OAA8BM,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAAS,CAAEC,OAAQH,EAAWG,QAC9BC,EAAW,mCAAG,8GAEGb,EAAAA,EAAAA,IAAmBM,EAAD,WAAsBK,GAF3C,OAEVf,EAFU,OAGhBS,EAAWT,GAHK,gDAKhBkB,QAAQC,IAAR,MALgB,yDAAH,qDASjB,OADAF,IACO,kBAAMJ,EAAWO,OAAjB,CACR,GAAE,CAACV,IACJQ,QAAQC,IAAIX,IAEV,wBACGA,GACCA,EAAQa,KAAKC,KAAI,YAA4C,IAAzCjB,EAAwC,EAAxCA,GAAIkB,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACvC,OACE,2BACE,SAAC,IAAD,CACEC,QAASD,EACTE,IAAKJ,EACLK,KAAM,CAAEC,MAAO,IAAKC,OAAQ,QAG9B,uBAAIP,KACJ,0BAAOC,MARAnB,EAWZ,KAGR,C,sEC1CK0B,E,QAAQC,GAAAA,IAAH,mEAGP,YAAkC,IAAD,IAA9BJ,KAAQC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,OAClB,MAAM,oBAAN,OACaD,EADb,2BAESA,EAFT,4BAGUC,EAHV,MAID,I,SCeH,EAtBc,SAAC,GAA4B,IAA1BJ,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,KACrBC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,OAETG,EAAI,sCAAkCJ,EAAlC,YAA2CC,EAA3C,yBACV,OACE,SAACC,EAAD,CAAOH,KAAMA,EAAb,UACE,gBACEM,IAAKR,EAAO,UALA,mCAKA,OAAkBA,GAAYO,EAC1CN,IAAKA,EACLQ,QAAQ,UAIf,C","sources":["Helpers/fetchApi.js","components/Cast/Cast.jsx","components/Image/Image.styled.js","components/Image/Image.jsx"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst apiKey = '76cbb606f190fc237086ec33f1fd98a3';\nconst fetchDayTrend = async options => {\n  const resp = await axios.get(`trending/movie/day?api_key=${apiKey}`, options);\n  return resp.data;\n};\nconst fetchMovieByQuery = async (query, options) => {\n  const resp = await axios.get(\n    `search/movie?api_key=${apiKey}&language=en-US&query=${query}&page=1&include_adult=false`,\n    options\n  );\n  return resp.data;\n};\nconst fetchMovieDetsById = async (id, detailEndpoint = '', options) => {\n  const resp = await axios.get(\n    `movie/${id}${detailEndpoint}?api_key=${apiKey}&language=en-US`,\n    options\n  );\n  return resp.data;\n};\nexport { fetchDayTrend, fetchMovieByQuery, fetchMovieDetsById };\n","import Image from 'components/Image';\nimport { fetchMovieDetsById } from 'Helpers/fetchApi';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const [casting, setCasting] = useState(null);\n  const { movieId } = useParams();\n  useEffect(() => {\n    const controller = new AbortController();\n    const option = { signal: controller.signal };\n    const getCastInfo = async () => {\n      try {\n        const resp = await fetchMovieDetsById(movieId, `/credits`, option);\n        setCasting(resp);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getCastInfo();\n    return () => controller.abort();\n  }, [movieId]);\n  console.log(casting);\n  return (\n    <ul>\n      {casting &&\n        casting.cast.map(({ id, name, character, profile_path }) => {\n          return (\n            <li key={id}>\n              <Image\n                imgLink={profile_path}\n                alt={name}\n                size={{ width: 200, height: 300 }}\n              />\n\n              <p>{name}</p>\n              <span>{character}</span>\n            </li>\n          );\n        })}\n    </ul>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\nconst Thumb = styled.div`\n  margin: 0;\n  /* width: 100%; */\n  ${({ size: { width, height } }) => {\n    return `\n    min-width: ${width}px;\n    width: ${width}px;\n    height: ${height}px;`;\n  }}\n`;\nexport { Thumb };\n","import PropTypes from 'prop-types';\nimport { Thumb } from './Image.styled';\nconst Image = ({ imgLink, alt, size }) => {\n  const { width, height } = size;\n  const BASE_LINK = 'https://image.tmdb.org/t/p/w400';\n  const plug = `https://via.placeholder.com/${width}x${height}?text=Image+not+found`;\n  return (\n    <Thumb size={size}>\n      <img\n        src={imgLink ? `${BASE_LINK}${imgLink}` : plug}\n        alt={alt}\n        loading=\"lazy\"\n      />\n    </Thumb>\n  );\n};\nImage.propTypes = {\n  imgLink: PropTypes.string,\n  alt: PropTypes.string.isRequired,\n  size: PropTypes.shape({\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n  }).isRequired,\n};\nexport default Image;\n"],"names":["axios","apiKey","fetchDayTrend","options","resp","data","fetchMovieByQuery","query","fetchMovieDetsById","id","detailEndpoint","useState","casting","setCasting","movieId","useParams","useEffect","controller","AbortController","option","signal","getCastInfo","console","log","abort","cast","map","name","character","profile_path","imgLink","alt","size","width","height","Thumb","styled","plug","src","loading"],"sourceRoot":""}