{"version":3,"file":"static/js/331.b44bf71b.chunk.js","mappings":"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","sources":["Helpers/fetchApi.js","components/BackLink/BackLink.styled.js","components/BackLink/BackLink.jsx","components/DetailedInfo/DetailedInfo.styled.js","components/DetailedInfo/DetailedInfo.jsx","Pages/MovieDetails.jsx","components/Image/Image.styled.js","components/Image/Image.jsx","jsStyledRoot/styledRoot.js"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst apiKey = '76cbb606f190fc237086ec33f1fd98a3';\nconst fetchDayTrend = async options => {\n  const resp = await axios.get(`trending/movie/day?api_key=${apiKey}`, options);\n  return resp.data;\n};\nconst fetchMovieByQuery = async (query, options) => {\n  const resp = await axios.get(\n    `search/movie?api_key=${apiKey}&language=en-US&query=${query}&page=1&include_adult=false`,\n    options\n  );\n  return resp.data;\n};\nconst fetchMovieDetsById = async (id, detailEndpoint = '', options) => {\n  const resp = await axios.get(\n    `movie/${id}${detailEndpoint}?api_key=${apiKey}&language=en-US`,\n    options\n  );\n  return resp.data;\n};\nexport { fetchDayTrend, fetchMovieByQuery, fetchMovieDetsById };\n","import { NavLink } from 'react-router-dom';\nimport { root } from 'jsStyledRoot/styledRoot';\nimport styled from 'styled-components';\nconst StyledLink = styled(NavLink)`\n  display: inline-block;\n  padding: 10px 15px;\n  font-size: 18px;\n  font-weight: 600;\n  color: ${root.orange};\n  transition: background-color ${root.globalAnim}, color ${root.globalAnim};\n  border-radius: 10px 10px 0 0;\n  &:hover,\n  :focus {\n    /* outline: 1px solid ${root.orange}; */\n    color: ${root.subTextColor};\n    background-color: ${root.mainElementBg};\n  }\n`;\nexport { StyledLink };\n","// import PropTypes from 'prop-types';\nimport { StyledLink } from './BackLink.styled';\nconst BackLink = ({ to, children }) => {\n  return <StyledLink to={to}>{children}</StyledLink>;\n};\nexport default BackLink;\n","import { NavLink } from 'react-router-dom';\nimport { root } from 'jsStyledRoot/styledRoot';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  padding: 50px 15px;\n  background-color: #32343b;\n`;\nconst Wrapper = styled.div`\n  display: flex;\n  gap: 10px;\n`;\nconst ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nconst Title = styled.h2``;\nconst UserScore = styled.span`\n  color: ${root.orange};\n  display: flex;\n  gap: 5px;\n`;\nconst Vote = styled.p`\n  font-weight: 500;\n  color: ${root.text};\n`;\n\nconst OverviewWrapper = styled.div``;\nconst OverviewLabel = styled.h3`\n  color: ${root.orange};\n  margin-bottom: 5px;\n`;\nconst Overview = styled.p``;\n\nconst GenresWrapper = styled.div``;\nconst GenresLabel = styled.p`\n  font-weight: 600;\n  color: ${root.orange};\n`;\nconst GenresList = styled.ul`\n  display: flex;\n  gap: 5px;\n`;\nconst GenresItem = styled.li`\n  font-weight: 700;\n`;\n\nconst AdditionalInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\nconst AdditionalInfoLabel = styled.p``;\nconst Navigation = styled.ul`\n  display: flex;\n  gap: 10px;\n`;\nconst StyledLink = styled(NavLink)`\n  padding: 5px 10px;\n  font-size: 18px;\n  font-weight: 600;\n  color: ${root.orange};\n  transition: outline ${root.globalAnim}, color ${root.globalAnim};\n  border-radius: 10px;\n  &:hover,\n  :focus {\n    outline: 1px solid ${root.orange};\n    color: ${root.subTextColor};\n  }\n`;\n\nexport {\n  Title,\n  Container,\n  Wrapper,\n  UserScore,\n  Vote,\n  OverviewWrapper,\n  OverviewLabel,\n  Overview,\n  GenresList,\n  GenresItem,\n  AdditionalInfoWrapper,\n  AdditionalInfoLabel,\n  Navigation,\n  StyledLink,\n  GenresWrapper,\n  GenresLabel,\n  ContentWrapper,\n};\n","import { Outlet } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Suspense } from 'react';\n// import Notification from 'components/Notification';\nimport Loader from 'components/Loader';\nimport {\n  Title,\n  Container,\n  Wrapper,\n  UserScore,\n  Vote,\n  OverviewWrapper,\n  OverviewLabel,\n  Overview,\n  GenresList,\n  GenresItem,\n  AdditionalInfoWrapper,\n  AdditionalInfoLabel,\n  Navigation,\n  StyledLink,\n  GenresWrapper,\n  GenresLabel,\n  ContentWrapper,\n} from './DetailedInfo.styled';\nimport Image from 'components/Image';\nconst DetailedInfo = ({\n  title,\n  genres,\n  overview,\n  vote_average,\n  backdrop_path,\n}) => {\n  const getAveragePercentageVote = averageVote => {\n    const result = Number((averageVote * 10).toFixed(1));\n    const stringed = String(result);\n    return stringed;\n  };\n\n  return (\n    <Container>\n      {' '}\n      <Wrapper>\n        <Image\n          size={{ width: 400, height: 225 }}\n          imgLink={backdrop_path}\n          alt={title}\n        />\n\n        <ContentWrapper>\n          <Title>{title}</Title>\n          <UserScore>\n            User score:\n            <Vote>{getAveragePercentageVote(vote_average)}%</Vote>\n          </UserScore>\n          <OverviewWrapper>\n            <OverviewLabel>Overview</OverviewLabel>\n            <Overview>{overview}</Overview>\n          </OverviewWrapper>\n          <GenresWrapper>\n            <GenresLabel>Genres:</GenresLabel>\n            <GenresList>\n              {genres.map(({ name, id }) => {\n                return <GenresItem key={id}>{name}</GenresItem>;\n              })}\n            </GenresList>\n          </GenresWrapper>\n        </ContentWrapper>\n      </Wrapper>\n      <AdditionalInfoWrapper>\n        <AdditionalInfoLabel>Additional information</AdditionalInfoLabel>\n        <Navigation>\n          <li>\n            <StyledLink to={`cast`}>Cast</StyledLink>\n          </li>\n          <li>\n            <StyledLink to={`reviews`}>Reviews</StyledLink>\n          </li>\n        </Navigation>\n        <Suspense fallback={<Loader /> /*<Notification title=\"Loading..\" />*/}>\n          <Outlet />\n        </Suspense>\n      </AdditionalInfoWrapper>\n    </Container>\n  );\n};\n\nDetailedInfo.propTypes = {\n  title: PropTypes.string.isRequired,\n  genres: PropTypes.array.isRequired,\n  overview: PropTypes.string.isRequired,\n  vote_average: PropTypes.number.isRequired,\n  backdrop_path: PropTypes.string.isRequired,\n};\nexport default DetailedInfo;\n","import BackLink from 'components/BackLink';\nimport DetailedInfo from 'components/DetailedInfo';\nimport { fetchMovieDetsById } from 'Helpers/fetchApi';\nimport { useEffect, useRef } from 'react';\nimport { useState } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetails] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  const locRef = useRef(backLinkHref);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const option = { signal: controller.signal };\n    const getMovieDetails = async () => {\n      try {\n        const resp = await fetchMovieDetsById(movieId, option);\n        setMovieDetails(resp);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getMovieDetails();\n    return () => controller.abort();\n  }, [movieId]);\n\n  return (\n    <>\n      <BackLink to={locRef.current}>Go Back</BackLink>\n      {movieDetails && (\n        <DetailedInfo\n          title={movieDetails.title}\n          genres={movieDetails.genres}\n          overview={movieDetails.overview}\n          vote_average={movieDetails.vote_average}\n          backdrop_path={movieDetails.backdrop_path}\n        />\n      )}\n    </>\n  );\n};\nexport default MovieDetails;\n","import styled from 'styled-components';\nconst Thumb = styled.div`\n  margin: 0;\n  /* width: 100%; */\n  ${({ size: { width, height } }) => {\n    return `\n    min-width: ${width}px;\n    width: ${width}px;\n    height: ${height}px;`;\n  }}\n`;\nexport { Thumb };\n","import PropTypes from 'prop-types';\nimport { Thumb } from './Image.styled';\nconst Image = ({ imgLink, alt, size }) => {\n  const { width, height } = size;\n  const BASE_LINK = 'https://image.tmdb.org/t/p/w400';\n  const plug = `https://via.placeholder.com/${width}x${height}?text=Image+not+found`;\n  return (\n    <Thumb size={size}>\n      <img\n        src={imgLink ? `${BASE_LINK}${imgLink}` : plug}\n        alt={alt}\n        loading=\"lazy\"\n      />\n    </Thumb>\n  );\n};\nImage.propTypes = {\n  imgLink: PropTypes.string,\n  alt: PropTypes.string.isRequired,\n  size: PropTypes.shape({\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n  }).isRequired,\n};\nexport default Image;\n","export const root = {\n  bodyBgColor: '#22232b',\n  mainElementBg: '#32343b',\n  subElementBg: '#50535C',\n  orange: '#e2580a',\n  text: '#DBD7D7',\n  subTextColor: '#ffffff',\n  globalAnim: `cubic-bezier(.06,.57,.52,.97) 300ms`,\n};\n"],"names":["axios","apiKey","fetchDayTrend","options","resp","data","fetchMovieByQuery","query","fetchMovieDetsById","id","detailEndpoint","StyledLink","styled","NavLink","root","to","children","Container","Wrapper","ContentWrapper","Title","UserScore","Vote","OverviewWrapper","OverviewLabel","Overview","GenresWrapper","GenresLabel","GenresList","GenresItem","AdditionalInfoWrapper","AdditionalInfoLabel","Navigation","title","genres","overview","vote_average","backdrop_path","Image","size","width","height","imgLink","alt","averageVote","result","Number","toFixed","String","getAveragePercentageVote","map","name","Suspense","fallback","Loader","useState","movieDetails","setMovieDetails","movieId","useParams","backLinkHref","useLocation","state","from","locRef","useRef","useEffect","controller","AbortController","option","signal","getMovieDetails","console","log","abort","current","Thumb","plug","src","loading","bodyBgColor","mainElementBg","subElementBg","orange","text","subTextColor","globalAnim"],"sourceRoot":""}