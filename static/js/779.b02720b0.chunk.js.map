{"version":3,"file":"static/js/779.b02720b0.chunk.js","mappings":"mQACAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAS,mCACTC,EAAa,mCAAG,WAAMC,GAAN,uFACDH,EAAAA,EAAAA,IAAA,qCAAwCC,GAAUE,GADjD,cACdC,EADc,yBAEbA,EAAKC,MAFQ,2CAAH,sDAIbC,EAAiB,mCAAG,WAAOC,EAAOJ,GAAd,uFACLH,EAAAA,EAAAA,IAAA,+BACOC,EADP,iCACsCM,EADtC,+BAEjBJ,GAHsB,cAClBC,EADkB,yBAKjBA,EAAKC,MALY,2CAAH,wDAOjBG,EAAkB,mCAAG,WAAOC,GAAP,8FAAWC,EAAX,+BAA4B,GAAIP,EAAhC,gCACNH,EAAAA,EAAAA,IAAA,gBACRS,GADQ,OACHC,EADG,oBACuBT,EADvB,mBAEjBE,GAHuB,cACnBC,EADmB,yBAKlBA,EAAKC,MALa,2CAAH,qD,iFCblBM,EAAYC,EAAAA,GAAAA,IAAH,4CAGTC,EAAUD,EAAAA,GAAAA,GAAH,kE,SCMb,EARqB,SAAC,GAA2B,IAAzBE,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAC/B,OACE,SAACJ,EAAD,UAAaI,IAAW,SAACF,EAAD,UAAUC,KAErC,C,6LCJKE,EAAOJ,EAAAA,GAAAA,GAAH,0JAMYK,EAAAA,EAAAA,cAEhBC,EAAON,EAAAA,GAAAA,GAAH,sBACJO,EAAgBP,EAAAA,GAAAA,KAAH,2CAGbQ,EAASR,EAAAA,GAAAA,GAAH,2CAGNS,EAAST,EAAAA,GAAAA,EAAH,sB,SC6BZ,EAxCgB,WACd,OAA4BU,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAAS,CAAEC,OAAQH,EAAWG,QAC9BC,EAAc,mCAAG,8GAEAxB,EAAAA,EAAAA,IAAmBiB,EAAS,WAAYK,GAFxC,OAEb1B,EAFa,OAGnBoB,EAAUpB,EAAK6B,SAHI,gDAKnBC,QAAQC,MAAR,MALmB,yDAAH,qDASpB,OADAH,IACO,kBAAMJ,EAAWQ,OAAjB,CACR,GAAE,CAACX,KAEF,8BACGF,GAAYA,EAAOc,QAClB,SAACrB,EAAD,UACGO,EAAOe,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAAS/B,EAAS,EAATA,GAC9B,OACE,UAACS,EAAD,YACE,UAACC,EAAD,sBACS,UAACC,EAAD,eAAUmB,SAGnB,SAAClB,EAAD,UAASmB,MALA/B,EAQd,OAGH,SAACgC,EAAA,EAAD,CAAc3B,QAAQ,+BAI7B,C,uDC7CM,IAAMG,EAAO,CAClByB,YAAa,UACbC,cAAe,UACfC,aAAc,UACdC,OAAQ,UACRC,KAAM,UACNC,aAAc,UACdC,WAAW,sC","sources":["Helpers/fetchApi.js","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","jsStyledRoot/styledRoot.js"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst apiKey = '76cbb606f190fc237086ec33f1fd98a3';\nconst fetchDayTrend = async options => {\n  const resp = await axios.get(`trending/movie/day?api_key=${apiKey}`, options);\n  return resp.data;\n};\nconst fetchMovieByQuery = async (query, options) => {\n  const resp = await axios.get(\n    `search/movie?api_key=${apiKey}&language=en-US&query=${query}&page=1&include_adult=false`,\n    options\n  );\n  return resp.data;\n};\nconst fetchMovieDetsById = async (id, detailEndpoint = '', options) => {\n  const resp = await axios.get(\n    `movie/${id}${detailEndpoint}?api_key=${apiKey}&language=en-US`,\n    options\n  );\n  return resp.data;\n};\nexport { fetchDayTrend, fetchMovieByQuery, fetchMovieDetsById };\n","import styled from 'styled-components';\nconst Container = styled.div`\n  padding: 20px 0;\n`;\nconst Message = styled.h2`\n  color: #e2580a;\n  text-align: center;\n`;\nexport { Container, Message };\n","import PropTypes from 'prop-types';\nimport { Container, Message } from './Notification.styled';\nconst Notification = ({ message, children }) => {\n  return (\n    <Container>{!children ? <Message>{message}</Message> : children}</Container>\n  );\n};\nNotification.propTypes = {\n  message: PropTypes.string,\n};\nexport default Notification;\n","import { root } from 'jsStyledRoot/styledRoot';\nimport styled from 'styled-components';\nconst List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  margin: 20px 0 0 0;\n  padding: 10px 20px;\n  background-color: ${root.subElementBg};\n`;\nconst Item = styled.li``;\nconst TextContainer = styled.span`\n  color: #e2580a;\n`;\nconst Author = styled.h3`\n  color: #d7d7d7;\n`;\nconst Review = styled.p``;\nexport { List, Item, TextContainer, Author, Review };\n","import Notification from 'components/Notification';\nimport { fetchMovieDetsById } from 'Helpers/fetchApi';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { List, Item, TextContainer, Author, Review } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [review, setReview] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const option = { signal: controller.signal };\n    const getReviewsData = async () => {\n      try {\n        const resp = await fetchMovieDetsById(movieId, '/reviews', option);\n        setReview(resp.results);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    getReviewsData();\n    return () => controller.abort();\n  }, [movieId]);\n  return (\n    <>\n      {review && !!review.length ? (\n        <List>\n          {review.map(({ author, content, id }) => {\n            return (\n              <Item key={id}>\n                <TextContainer>\n                  Author:<Author> {author}</Author>\n                </TextContainer>\n\n                <Review>{content}</Review>\n              </Item>\n            );\n          })}\n        </List>\n      ) : (\n        <Notification message=\"There are no reviews here\" />\n      )}\n    </>\n  );\n};\nexport default Reviews;\n","export const root = {\n  bodyBgColor: '#22232b',\n  mainElementBg: '#32343b',\n  subElementBg: '#50535C',\n  orange: '#e2580a',\n  text: '#DBD7D7',\n  subTextColor: '#ffffff',\n  globalAnim: `cubic-bezier(.06,.57,.52,.97) 300ms`,\n};\n"],"names":["axios","apiKey","fetchDayTrend","options","resp","data","fetchMovieByQuery","query","fetchMovieDetsById","id","detailEndpoint","Container","styled","Message","message","children","List","root","Item","TextContainer","Author","Review","useState","review","setReview","movieId","useParams","useEffect","controller","AbortController","option","signal","getReviewsData","results","console","error","abort","length","map","author","content","Notification","bodyBgColor","mainElementBg","subElementBg","orange","text","subTextColor","globalAnim"],"sourceRoot":""}